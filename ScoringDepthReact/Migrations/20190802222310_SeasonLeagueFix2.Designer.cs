// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoringDepthReact.Models;

namespace ScoringDepthReact.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190802222310_SeasonLeagueFix2")]
    partial class SeasonLeagueFix2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ContactMe");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsProcessed");

                    b.Property<string>("LastName");

                    b.Property<string>("Message");

                    b.Property<string>("Role");

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.League", b =>
                {
                    b.Property<long>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("LeagueId");

                    b.ToTable("League");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Ranking", b =>
                {
                    b.Property<long>("RankingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Period");

                    b.Property<double>("Sdi");

                    b.HasKey("RankingId");

                    b.ToTable("Ranking");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<long>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Season", b =>
                {
                    b.Property<long>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RegionId");

                    b.Property<long>("YearId");

                    b.HasKey("SeasonId");

                    b.HasIndex("RegionId");

                    b.HasIndex("YearId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.SeasonLeague", b =>
                {
                    b.Property<long>("SeasonLeagueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("LeagueId");

                    b.Property<long>("SeasonId");

                    b.HasKey("SeasonLeagueId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonLeague");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.SeasonRanking", b =>
                {
                    b.Property<long>("SeasonRankingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RankingId");

                    b.Property<long>("TeamSeasonId");

                    b.HasKey("SeasonRankingId");

                    b.HasIndex("RankingId");

                    b.HasIndex("TeamSeasonId");

                    b.ToTable("SeasonRanking");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Team", b =>
                {
                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.TeamSeason", b =>
                {
                    b.Property<long>("TeamSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("LeagueSeasonId");

                    b.Property<long>("TeamId");

                    b.HasKey("TeamSeasonId");

                    b.HasIndex("LeagueSeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamSeason");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Year", b =>
                {
                    b.Property<long>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("YearStart");

                    b.HasKey("YearId");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Region", b =>
                {
                    b.HasOne("ScoringDepthReact.Models.Domain.Country", "Country")
                        .WithMany("RegionRefIds")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.Season", b =>
                {
                    b.HasOne("ScoringDepthReact.Models.Domain.Region", "Region")
                        .WithMany("Seasons")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScoringDepthReact.Models.Domain.Year", "Year")
                        .WithMany("Seasons")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.SeasonLeague", b =>
                {
                    b.HasOne("ScoringDepthReact.Models.Domain.League", "League")
                        .WithMany("LeagueSeasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScoringDepthReact.Models.Domain.Season", "Season")
                        .WithMany("SeasonLeagues")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.SeasonRanking", b =>
                {
                    b.HasOne("ScoringDepthReact.Models.Domain.Ranking", "Ranking")
                        .WithMany("SeasonRankingRefIds")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScoringDepthReact.Models.Domain.TeamSeason", "TeamSeason")
                        .WithMany()
                        .HasForeignKey("TeamSeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScoringDepthReact.Models.Domain.TeamSeason", b =>
                {
                    b.HasOne("ScoringDepthReact.Models.Domain.SeasonLeague", "LeagueSeason")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("LeagueSeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScoringDepthReact.Models.Domain.Team", "Team")
                        .WithMany("TeamSeasonRefIds")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
